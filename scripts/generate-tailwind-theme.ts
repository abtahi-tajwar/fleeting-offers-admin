import { buildSync } from 'esbuild';
import fs from 'fs';
import path from 'path';

// Step 1: Compile the TypeScript theme file to JavaScript in memory
const result = buildSync({
	entryPoints: ['src/config/theme/theme.ts'],
	bundle: true,
	platform: 'node',
	write: false,
	format: 'cjs',
});

const compiled = result.outputFiles[0].text;

// Step 2: Emulate CommonJS and execute compiled code
const module = { exports: {} };
const func = new Function('module', 'exports', compiled);
func(module, module.exports);

// Step 3: Extract the theme object
// @ts-ignore
const theme = module.exports.default || module.exports.theme || module.exports;

if (!theme || !theme.light || !theme.dark) {
	console.error('Theme format invalid or missing colors');
	process.exit(1);
}

// Step 4: Generate CSS variables
let css = '';
const flatten = (prefix, value, isDark = false) => {
	const convertedPrefix = prefix.split("_").join("-");
	if (Array.isArray(value)) {
		value.forEach((v, i) => {
			css += `    --${convertedPrefix}-${i}${isDark ? '-dark' : ''}: ${v};\n`;
		});
	} else if (typeof value === 'object') {
		Object.entries(value).forEach(([k, v]) => {
			flatten(`${convertedPrefix}-${k}`, v, isDark);
		});
	} else {
		css += `    --${convertedPrefix}${isDark ? '-dark' : ''}: ${value};\n`;
	}
};

for (const [key, value] of Object.entries(theme.light)) {
	flatten(key, value);
}
for (const [key, value] of Object.entries(theme.dark)) {
	flatten(key, value, true);
}


let template = `/* Do not edit this file, this will be automatically replaced by system */
@import "tailwindcss";
@plugin "daisyui" {
	themes: false;
}
@custom-variant dark (&:where(.dark, .dark *));
@theme {
	${css}
}`;


// Step 5: Write to file
const outputPath = path.join('src', 'tailwind.css');
fs.mkdirSync(path.dirname(outputPath), { recursive: true });
fs.writeFileSync(outputPath, template);

console.log('âœ… Tailwind theme generated at:', outputPath);

